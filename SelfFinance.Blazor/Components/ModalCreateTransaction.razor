@using SelfFinance.Blazor.Components.Abstract
@using Microsoft.AspNetCore.Components.Forms
@using SelfFinance.ApiConsumer.ViewModels
@using SelfFinance.Data.Models
@using SelfFinance.Domain.Dto

<ModalBase @ref="_modalBase" Title="New Transaction">
    <Content>
        <EditForm Model="@Transaction" OnValidSubmit="Submit">
            <DataAnnotationsValidator/>

            <div class="form__item">
                <ValidationMessage For="() => Transaction!.OperationDate"/>
                <InputDate id="date" TValue="DateTime" @bind-Value="Transaction!.OperationDate" min="2000-01-01" max="@DateTime.Today"/>
                <label for="date">Date</label>
            </div>

            <div class="form__item">
                <ValidationMessage For="() => Transaction!.Sum"/>
                <InputNumber id="sum" TValue="decimal" @bind-Value="Transaction!.Sum" min="0" width="13"/>
                <label for="sum">Amount</label>
            </div>

            <div class="form__item">
                <ValidationMessage For="() => Transaction!.OperationTagId"/>
                <InputSelect TValue="int" @bind-Value="Transaction!.OperationTagId">
                    <option value="" disabled selected hidden>Select Tag</option>
                    @foreach (var typeGroup in GetGroupedTags(OperationTags))
                    {
                        <optgroup label="@typeGroup.Key">
                            @foreach (var tag in typeGroup)
                            {
                                <option TValue="int" Value="@tag.Id">@tag.Name</option>
                            }
                        </optgroup>
                    }
                </InputSelect>
                <label for="sum">Tag</label>
            </div>

            <div class="btn-container">
                <button class="cancel-btn">Cancel</button>
                <input class="success-btn" type="submit" value="Submit"/>
            </div>
        </EditForm>
    </Content>
</ModalBase>

@code {
    private ModalBase _modalBase;
    
    public TransactionCreateDto? Transaction { get; set; }

    [Parameter]
    public IEnumerable<OperationTagViewModel> OperationTags { get; set; }
    
    // [Parameter]
    // public EventHandler<> Type { get; set; }

    [Parameter]
    public Func<Task> OnCreate { get; set; } = () => Task.CompletedTask;

    [Parameter]
    public Action OnCancel { get; set; } = () => { };

    protected override void OnInitialized()
    {
        Transaction = new TransactionCreateDto { OperationDate = DateTime.Today };
    }

    private static IEnumerable<IGrouping<OperationType, OperationTagViewModel>> GetGroupedTags(IEnumerable<OperationTagViewModel> tags)
    {
        return tags
            .GroupBy(t => t.OperationType)
            .ToList();
    }

    public void Show()
    {
        _modalBase.Show();
    }

    private void Submit(EditContext obj)
    {
        throw new NotImplementedException();
    }

}